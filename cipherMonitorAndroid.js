// frida -U -l cipherMonitorAndroid.js -f <app-package-name>
// frida -H <device-IP-address> -l cipherMonitorAndroid.js -f <app-package-name>

Java.perform(function() {
    var base64 = Java.use("java.util.Base64");
    var cipher = Java.use("javax.crypto.Cipher");
    var ivParameterSpec = Java.use('javax.crypto.spec.IvParameterSpec');
    var pbeKeySpec = Java.use('javax.crypto.spec.PBEKeySpec');     
    var secretKeySpec = Java.use('javax.crypto.spec.SecretKeySpec');    
    var stringClass = Java.use("java.lang.String");

    const color = {
        red     : '\x1b[0;31m',
        yellow  : '\x1b[0;33m',
        green   : '\x1b[0;32m',
        blue    : '\x1b[0;34m',
        purple  : '\x1b[0;35m',
        cyan    : '\x1b[0;36m',
        nc      : '\x1b[0m'
    };    
    
    cipher.init.overload('int', 'java.security.Key').implementation = function(opmode, key) {
        var ret = this.init.overload('int', 'java.security.Key').call(this, opmode, key);

        logger("Algorithm", "", this.getAlgorithm());        
        logger("Mode", "", this.getOpmodeString(opmode));
        logger("Key", "base64", base64.getEncoder().encodeToString(key.getEncoded()));        

        return ret;
    }
    
    cipher.init.overload('int', 'java.security.cert.Certificate').implementation = function(opmode, certificate) {
        var ret = this.init.overload('int', 'java.security.cert.Certificate').call(this, opmode, certificate);

        logger("Algorithm", "", this.getAlgorithm());        
        logger("Mode", "", this.getOpmodeString(opmode));
        logger("Certificate", "base64", base64.getEncoder().encodeToString(certificate.getEncoded()));        

        return ret;
    }    
    
    cipher.init.overload('int', 'java.security.Key', 'java.security.AlgorithmParameters').implementation = function(opmode, key, algorithmParameter){
        var ret = this.init.overload('int', 'java.security.Key', 'java.security.AlgorithmParameters').call(this, opmode, key, algorithmParameter);

        logger("Algorithm", "", this.getAlgorithm());
        logger("Mode", "", this.getOpmodeString(opmode));
        logger("Key", "base64", base64.getEncoder().encodeToString(key.getEncoded()));

        return ret;
    }

    cipher.init.overload('int', 'java.security.Key', 'java.security.spec.AlgorithmParameterSpec').implementation = function(opmode, key, algorithmParameter){
        var ret = this.init.overload('int', 'java.security.Key', 'java.security.spec.AlgorithmParameterSpec').call(this, opmode, key, algorithmParameter);

        logger("Algorithm", "", this.getAlgorithm());        
        logger("Mode", "", this.getOpmodeString(opmode));
        logger("Key", "base64", base64.getEncoder().encodeToString(key.getEncoded()));
        logger("Key", "hexdec", bytesToHex(key.getEncoded()));

        return ret;
    }

    secretKeySpec.$init.overload('[B', 'java.lang.String').implementation = function(key, input2) {
        var ret = this.$init.overload('[B', 'java.lang.String').call(this, key, input2);

        //logger("Key", "base64", base64.getEncoder().encodeToString(key));
        //logger("Key", "string", bytesToString(key));
        //logger("Key", "hexdec", bytesToHex(key));

        return ret;
    };

    ivParameterSpec.$init.overload('[B').implementation = function(iv){
        var ret = this.$init.overload('[B').call(this, iv);

        //logger("IV", "base64", base64.getEncoder().encodeToString(iv));
        logger("IV", "string", bytesToString(iv));
        //logger("IV", "hexdec", bytesToHex(iv));

        return ret;
    }
    
    pbeKeySpec.$init.overload('[C', '[B', 'int', 'int').implementation = function(pass, salt, iter, keyLength) {
        var ret = this.$init.overload('[C', '[B', 'int', 'int').call(this, pass, salt, iter, keyLength);

        logger("Key", "string", bytesToString(pass));
        logger("Salt", "hexdec", bytesToHex(salt));

        return ret;
    }

    cipher.doFinal.overload('[B').implementation = function(input){
        var ret = this.doFinal.overload('[B').call(this, input);

        //logger("Input", "base64", base64.getEncoder().encodeToString(input));
        logger("Input", "string", bytesToString(input));
        logger("Output", "base64", base64.getEncoder().encodeToString(ret));
        //logger("Output", "string", bytesToString(ret));
        separator();

        return ret;
    }

    cipher.doFinal.overload('[B', 'int').implementation = function(input,input2){
        var ret = this.doFinal.overload('[B', 'int').call(this, input, input2);
        
        //logger("Input", "base64", base64.getEncoder().encodeToString(input));
        logger("Input", "string", bytesToString(input));
        logger("Output", "base64", base64.getEncoder().encodeToString(ret));
        //logger("Output", "string", bytesToString(ret));
        separator();

        return ret;
    }

    cipher.doFinal.overload('[B', 'int', 'int').implementation = function(input, input2, input3){        
        var ret = this.doFinal.overload('[B', 'int', 'int').call(this, input, input2, input3);
        
        //logger("Input", "base64", base64.getEncoder().encodeToString(input));
        logger("Input", "string", bytesToString(input));
        logger("Output", "base64", base64.getEncoder().encodeToString(ret));
        //logger("Output", "string", bytesToString(ret));
        separator();

        return ret;
    }

    cipher.doFinal.overload('[B', 'int', 'int', '[B').implementation = function(input, input2, input3, input4){
        var ret = this.doFinal.overload('[B', 'int', 'int', '[B').call(this, input, input2, input3, input4);

        //logger("Input", "base64", base64.getEncoder().encodeToString(input));
        logger("Input", "string", bytesToString(input));
        logger("Output", "base64", base64.getEncoder().encodeToString(ret));
        //logger("Output", "string", bytesToString(ret));
        separator();

        return ret;
    }

    cipher.doFinal.overload('[B', 'int', 'int', '[B', 'int').implementation = function(input, input2, input3, input4, input5){
        var ret = this.doFinal.overload('[B', 'int', 'int', '[B', 'int').call(this, input, input2, input3, input4, input5);
        
        try {
            //logger("Input", "base64", base64.getEncoder().encodeToString(input));
            logger("Input", "string", bytesToString(input));
            logger("Output", "base64", base64.getEncoder().encodeToString(ret));
            //logger("Output", "string", bytesToString(ret));
            separator();
        } catch (error) {
            //errorLogger(error.message);
        } finally {
            return ret;
        }        
    }

    function getDateTime() {
        var today    = new Date();
        var year     = today.getFullYear();
        var month    = `${today.getMonth() + 1}`.padStart(2, "0");
        var day      = `${today.getDate()}`.padStart(2, "0");
        var dateTime = [day, month, year].join("/");
        var hour     = `${today.getHours()}`.padStart(2, "0") + ":" + `${today.getMinutes()}`.padStart(2, "0") + ":" + `${today.getSeconds()}`.padStart(2, "0");

        return "[" + color.blue + dateTime + " " + hour + color.nc + "]";
    }

    function init() {
        successLogger("Script started successfully");
    }
    
    function successLogger(message) {
        console.log("\n" + getDateTime() + " [" + color.green + "INFO" + color.nc + "] " + message);       
    }

    function errorLogger(message){
        console.log("\n" + getDateTime() + " [" + color.red + "ERROR" + color.nc + "] " + message + "\n");       
    }

    function logger(type, subtype, value) {
        if (isJSON(value)) {
            value = color.cyan + value + color.nc
        }
        if (subtype.trim().length === 0) {
            console.log(color.green + type.padEnd(9) + color.nc + subtype.padEnd(9) + " : " + value );
        } else {
            console.log(color.green + type.padEnd(9) + color.nc + color.yellow + " (" + subtype.padEnd(6) + ")" + color.nc + " : " + value);
        }
    }

    function separator() {
        console.log("---------------" + getDateTime() + "---------------");
    }

    function bytesToString(bytes) {        
        return stringClass.$new(bytes).toString();
    }
 
    function bytesToHex(bytes) {
        var hexArray = [];
        for (var i = 0; i < bytes.length; ++i) {
            var hex = (bytes[i] & 0xff).toString(16);
            hex = hex.length === 1 ? "0" + hex : hex;
            hexArray.push(hex);
        }
        return hexArray.join("");
    }

    function isJSON(str) {
        try {
            const parsedJson = JSON.parse(str);
            return (typeof parsedJson === 'object' && parsedJson !== null);
        } catch (e) {
            return false;
        }
    }

    init();

});